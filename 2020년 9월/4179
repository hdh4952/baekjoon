// 백준 4179번 불!
#include <bits/stdc++.h>
#define X first
#define Y second
using namespace std;

int R, C, cnt;
char arr[1000][1000];
queue<pair<int,int> > F, J;	// 불이난 공간 , 지훈이가 도망친 공간 
int px[] = {-1, 1, 0 ,0};
int py[] = {0, 0, -1, 1};
bool Jvisit[1000][1000], Fvisit[1000][1000], flag;

int main() {
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	
	cin >> R >> C;
	
	for(int i=0 ; i<R ; i++) {
		for(int j=0 ; j<C ; j++) {
			cin >> arr[i][j];
			if(arr[i][j] == 'J') {
				J.push({i,j});  // 현재 지훈이의 위치 J에 저장
				Jvisit[i][j] = true;
			} 
			if(arr[i][j] == 'F') {
				F.push({i,j});
				Fvisit[i][j] = true;  // 현재 불의 위치 저장
			} 
		}
	}
	
	while(!J.empty()) {
		int Fsize = F.size();
		for(int i=0 ; i<Fsize ; i++) {  
			int Fx = F.front().X, Fy = F.front().Y;
			F.pop();
			for(int dir=0 ; dir<4 ; dir++) {  // 현재 불이 난 위치의 상하좌우 탐색
				int fx = Fx+px[dir], fy = Fy+py[dir]; 
				if(fx < 0 || fx >= R || fy < 0 || fy >= C) continue;  // 범위를 넘어가면 continue
				if(Fvisit[fx][fy]) continue;  // 이미 불이 퍼졌다면 continue
				Fvisit[fx][fy] = true;  // 방문 확인
				if(arr[fx][fy] == 'J' || arr[fx][fy] == '.') {  
					arr[fx][fy] = 'F';
					F.push({fx,fy});  // 불이 퍼진 위치 저장
				}
			}
		}
		int Jsize = J.size();
		for(int i=0 ; i<Jsize ; i++) {  
			int x = J.front().X, y = J.front().Y;
			J.pop();
			for(int dir=0 ; dir<4 ; dir++) {  // 현재 지훈이의 위치 상하좌우 탐색
				int nx = x+px[dir], ny = y+py[dir];
				if(nx < 0 || nx >= R || ny < 0 || ny >= C) {  // 지훈이가 미로를 탈출했다면 결과값 출력하고 종료
					cout << cnt+1;
					return 0;
				}
				if(Jvisit[nx][ny]) continue;  // 지훈이가 이미 방문했다면 continue
				Jvisit[nx][ny] = true;  // 방문 확인
				if(arr[nx][ny] == '.') {
					arr[nx][ny] = 'J';
					J.push({nx,ny});  // 현재 지훈이의 위치 저장
				}
			}
		}
		cnt++;
	}
	
	if(!flag) cout << "IMPOSSIBLE"; // 탈출하지 못했다면 IMPOSSIBLE 출력
}
